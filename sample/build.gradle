apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'androidx.navigation.safeargs'

group = 'com.emarsys.sample'

android {
    buildToolsVersion Config.buildToolsVersion
    compileSdkVersion Config.targetApiLevel
    defaultConfig {
        applicationId "com.emarsys.sample"
        minSdkVersion 24
        targetSdkVersion 32
        multiDexEnabled true
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner "com.emarsys.sample.testutils.SampleAppTestRunner"
        resValue "string", "sdk_version", "${gitVersionName}"

        def clientId = null
        def localConfigPropertiesFile = rootProject.file('localConfig.properties')
        def localConfigProperties = new Properties()
        if (localConfigPropertiesFile.exists()) {
            localConfigProperties.load(new FileInputStream(localConfigPropertiesFile))
            clientId = localConfigProperties.getProperty("googleOAuthServerClientId")
        }

        buildConfigField "String", "GOOGLE_OAUTH_SERVER_CLIENT_ID", "\"${System.env.GOOGLE_OAUTH_SERVER_CLIENT_ID ?: clientId}\""
    }

    buildFeatures {
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
        kotlinCompilerVersion '1.6.10'
    }

    if (project.devConfig.releaseSampleApp || System.env.DEVELOPMENT_MODE) {
        signingConfigs {
            release {
                storePassword System.env.RELEASE_STORE_PASSWORD ?: project.devConfig.releaseStorePassword
                keyAlias System.env.RELEASE_KEY_ALIAS ?: project.devConfig.releaseKeyAlias
                keyPassword System.env.RELEASE_KEY_PASSWORD ?: project.devConfig.releaseKeyPassword
                storeFile file(System.env.RELEASE_STORE_FILE ?: project.devConfig.releaseStoreFile)
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }

    buildTypes {
        debug {
            multiDexKeepProguard file("proguard-multidex-rules.pro")
            multiDexEnabled true
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }
}

buildscript {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url 'https://developer.huawei.com/repo/' }
    }
    dependencies {
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.huawei.agconnect:agcp:1.6.6.200'
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    if (project.devConfig.useLocalDependency || System.env.DEVELOPMENT_MODE) {
        implementation project(':emarsys-sdk')
        implementation project(':emarsys-firebase')
        implementation project(':emarsys-huawei')
    } else {
        implementation 'com.emarsys:emarsys-sdk:+'
        implementation 'com.emarsys:emarsys-firebase:+'
        implementation 'com.emarsys:emarsys-huawei:+'
    }
    // Getting a "Could not find firebase-core" error? Make sure you have
    // the latest Google Repository in the Android SDK manager

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.20"
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'io.coil-kt:coil:2.1.0'

    implementation "androidx.core:core-ktx:1.8.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "com.google.android.material:material:1.6.1"
    implementation "androidx.compose.ui:ui:1.1.1"
    implementation "androidx.compose.material:material:1.1.1"
    implementation "androidx.compose.ui:ui-tooling-preview:1.1.1"
    implementation "androidx.navigation:navigation-compose:2.5.0-rc01"
    implementation "androidx.compose.material:material-icons-extended:1.1.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.activity:activity-compose:1.4.0"
    implementation "io.coil-kt:coil-compose:2.1.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "com.chibatching.kotpref:kotpref:2.13.2"
    implementation "com.google.firebase:firebase-common-ktx:20.1.1"
    implementation "com.google.firebase:firebase-messaging-ktx:23.0.5"
    implementation "com.google.android.gms:play-services-auth:20.2.0"
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.20"
    implementation "com.google.accompanist:accompanist-swiperefresh:0.23.1"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.13.+"

    debugImplementation "androidx.compose.ui:ui-tooling:1.1.1"

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.1.1"
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    androidTestImplementation 'io.kotlintest:kotlintest-runner-junit4:3.4.2'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.huawei.agconnect'
