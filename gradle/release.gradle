task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    if (javadoc.destinationDir != null) {
        from javadoc.destinationDir
    } else {
        println("Javadoc not found")
    }
}

afterEvaluate {
    publishing {
        publications {
            "${project.name}"(MavenPublication) {
                groupId = group
                artifactId = project.name
                artifact sourcesJar
                artifact javadocJar
                artifact("$buildDir/outputs/aar/${project.name}-release.aar")
                pom {
                    name = project.name
                    description = "${project.name} module of the EmarsysSDK"
                    url = 'https://github.com/emartech/android-emarsys-sdk'
                    licenses {
                        license {
                            name = 'Mozilla Public License 2.0'
                            url = 'https://github.com/emartech/android-emarsys-sdk/blob/master/LICENSE'
                        }
                    }
                    organization {
                        name = 'Emarsys'
                        url = 'https://emarsys.com'
                    }
                    developers {
                        developer {
                            organization = 'Emarsys'
                            organizationUrl = 'https://emarsys.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/emartech/android-emarsys-sdk.git'
                        developerConnection = 'scm:git:https://github.com/emartech/android-emarsys-sdk.git'
                        url = 'https://github.com/emartech/android-emarsys-sdk'
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode("dependencies")
                        configurations.getByName("api") {
                            dependencies.forEach {
                                def dependencyNode = dependenciesNode.appendNode("dependency")
                                dependencyNode.appendNode("groupId", it.group)
                                dependencyNode.appendNode("artifactId", it.name)
                                dependencyNode.appendNode("version", it.version)
                            }
                        }
                        configurations.getByName("implementation") {
                            dependencies.forEach {
                                def dependencyNode = dependenciesNode.appendNode("dependency")
                                dependencyNode.appendNode("groupId", it.group)
                                dependencyNode.appendNode("artifactId", it.name)
                                dependencyNode.appendNode("version", it.version)
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}